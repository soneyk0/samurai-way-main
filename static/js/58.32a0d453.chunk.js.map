{"version":3,"file":"static/js/58.32a0d453.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profilePhoto\":\"ProfileInfo_profilePhoto__1FrHD\",\"selectedPage\":\"ProfileInfo_selectedPage__j3mWC\",\"content\":\"ProfileInfo_content__Ivwxy\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__bFylV\",\"userPhoto\":\"ProfileInfo_userPhoto__6pcwK\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status ])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                   <b>Status:</b> <span onDoubleClick={activateEditMode}>{props.status || '--------'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange}\r\n                           autoFocus={true}\r\n                           onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\n\r\nexport type ProfileFormDataType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileFormDataType>> = ({handleSubmit,error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <button>Save</button>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n        </div>\r\n        <div>\r\n            <b>Full name</b>:{createField(\"Full name\", 'fullName', [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>:{createField(\"\", 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n        </div>\r\n        <div>\r\n            <b>My professional\r\n                skills</b>:{createField(\"My professional skills\", 'lookingForAJobDescription', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>:{createField(\"About me\", 'aboutMe', [], Textarea)}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileFormDataType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport styles from \"../../Profile/ProfileInfo/ProfileInfo.module.css\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport {ProfileModel} from \"../../../redux/profile-reducer\";\r\nimport ProfileDataForm, {ProfileFormDataType} from \"./ProfileDataForm\";\r\n\r\nexport type ProfileInfoType = {\r\n    profile: ProfileModel\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n    isOwner: boolean\r\n    savePhoto: (photoFile: File) => void\r\n    saveProfile: (profile: ProfileFormDataType) => void\r\n\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: ProfileInfoType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length !== 0) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileFormDataType) => {\r\n        saveProfile(formData)\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.small ? profile.photos.small : userPhoto}\r\n                     className={styles.userPhoto} alt={'avatar'}/>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }} profile={profile} isOwner={isOwner}/>}\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport type ProfileDataType = {\r\n    profile: ProfileModel\r\n    isOwner?: boolean\r\n    goToEditMode?: () => void\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataType) => {\r\n    return <div>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode}>Edit</button>\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>:{profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>:{profile.lookingForAJob ? 'Yes' : 'No'}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b>:{profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>:{profile.aboutMe}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__eZLTq\",\"posts\":\"MyPosts_posts__BgJ1G\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__CRBk1\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport {PostModel, ProfileModel} from \"../../../../redux/profile-reducer\";\r\n\r\ninterface PostProps extends PostModel{\r\n    profile:ProfileModel\r\n}\r\n\r\nconst Post = ({message, likesCount,profile}:PostProps,) => {\r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <img src={profile.photos.small} alt={''}/>\r\n                {message}\r\n                <div><span>like {likesCount}</span></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {PostModel, ProfileModel} from \"../../../redux/profile-reducer\";\r\n\r\ntype MyPostsType = {\r\n    posts: PostModel[]\r\n    addPost: (newPostText: string) => void\r\n    profile:ProfileModel\r\n}\r\n\r\ntype FormDataType = {\r\n    newPostText: string,\r\n}\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n    let postsElements =\r\n        props.posts.map(p => <Post key={p.id} id={p.id} message={p.message} likesCount={p.likesCount} profile={props.profile}/>)\r\n\r\n    let onAddPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My post</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nlet AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'} component={Textarea} validate={[required, maxLength10]} placeholder={'Post message'}/>\r\n            </div>\r\n            <div>\r\n                <button>Add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport default MyPosts","import React from \"react\";\r\nimport {addPostActionCreator, ProfileReducerState} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = ProfileReducerState\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText:string) => void\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profileReducer.posts,\r\n        profile: state.profileReducer.profile,\r\n        status: state.profileReducer.status\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText:string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileModel} from \"../../redux/profile-reducer\";\r\nimport {ProfileFormDataType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\n\r\n\r\ntype ProfileTypePage = {\r\n    profile: ProfileModel\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n    isOwner: boolean\r\n    savePhoto: (photoFile: File) => void\r\n    saveProfile:(profile:ProfileFormDataType)=>void\r\n\r\n}\r\n\r\nconst Profile = (props: ProfileTypePage) => {\r\n\r\n    return (<div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                updateStatus={props.updateStatus}\r\n                status={props.status}\r\n                isOwner={props.isOwner}\r\n                saveProfile={props.saveProfile}\r\n                savePhoto={props.savePhoto}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getStatusTC,\r\n    getUserProfileTC,\r\n    ProfileModel,\r\n    savePhotoTC,\r\n    saveProfileTC,\r\n    updateStatusTC\r\n} from \"../../redux/profile-reducer\";\r\nimport {Redirect, useLocation, useParams,} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileFormDataType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\ntype ProfileContainerType = {\r\n    getUserProfile: (userId: string) => void,\r\n    profile: ProfileModel\r\n    router: { location: Location, params: { [key: string]: string } }\r\n    isAuth: boolean\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n    authorizedUserId: string\r\n    savePhoto: (photoFile: File) => void\r\n    saveProfile:(profile:ProfileFormDataType)=>void\r\n\r\n}\r\n\r\nfunction withRouter(Component: any) {\r\n    function ComponentWithRouterProp(props: any) {\r\n        let location = useLocation();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{location, params}}\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.router.params['userId']\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                <Redirect to={'/login'}/>\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.router.params['userId'] != prevProps.router.params['userId']) {\r\n            this.refreshProfile()\r\n            console.log(this.props.profile)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.router.params['userId']}\r\n                     saveProfile={this.props.saveProfile}\r\n                     updateStatus={this.props.updateStatus}\r\n                     status={this.props.status}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        profile: state.profileReducer.profile,\r\n        status: state.profileReducer.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile: getUserProfileTC,\r\n        getStatus: getStatusTC,\r\n        updateStatus: updateStatusTC,\r\n        savePhoto: savePhotoTC,\r\n        saveProfile:saveProfileTC\r\n    }),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer)\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n\r\n}\r\nlet mapStateToPropsForRedirect = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n\r\n        let {isAuth, ...resProps} = props\r\n\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...resProps as T}/>\r\n    }\r\n\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","reduxForm","form","handleSubmit","error","onSubmit","className","style","createField","Input","type","Textarea","ProfileData","profile","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","savePhoto","saveProfile","Preloader","s","src","photos","small","userPhoto","styles","alt","target","files","length","initialValues","formData","message","likesCount","MyPosts","React","postsElements","posts","map","p","id","AddNewPostFormRedux","values","addPost","newPostText","maxLength10","maxLengthCreator","Field","name","component","validate","required","placeholder","connect","state","profileReducer","dispatch","addPostActionCreator","ProfileContainer","userId","this","router","params","authorizedUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","console","log","compose","auth","isAuth","getUserProfileTC","getStatusTC","updateStatusTC","savePhotoTC","saveProfileTC","Component","location","useLocation","useParams","WithAuthRedirect","mapStateToPropsForRedirect","resProps","to"],"sourceRoot":""}