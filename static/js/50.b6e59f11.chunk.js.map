{"version":3,"file":"static/js/50.b6e59f11.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileStatusWithHooks.module.css?20f5","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileDataForm.module.css?5c5c","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profilePhoto\":\"ProfileInfo_profilePhoto__1FrHD\",\"selectedPage\":\"ProfileInfo_selectedPage__j3mWC\",\"content\":\"ProfileInfo_content__Ivwxy\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__bFylV\",\"userPhoto\":\"ProfileInfo_userPhoto__6pcwK\",\"changeFile\":\"ProfileInfo_changeFile__uEzDO\",\"inputFileButton\":\"ProfileInfo_inputFileButton__D2lBK\",\"profileBlock\":\"ProfileInfo_profileBlock__-it5m\",\"profileData\":\"ProfileInfo_profileData__wf1XR\",\"statusBlock\":\"ProfileInfo_statusBlock__Y8L9+\",\"buttonEdit\":\"ProfileInfo_buttonEdit__l+hIb\"};","// extracted by mini-css-extract-plugin\nexport default {\"noStatus\":\"ProfileStatusWithHooks_noStatus__X53Bn\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport writeStatus from '../../../assets/images/writestatus.png'\r\nimport s from './ProfileStatusWithHooks.module.css'\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status:</b> <span onDoubleClick={activateEditMode}>{props.status ||\r\n                    <span className={s.noStatus}>Write your status <img src={writeStatus}\r\n                                                                        alt={'write status'}/></span>}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange}\r\n                           autoFocus={true}\r\n                           onBlur={deactivateEditMode}\r\n                           value={status}\r\n                           placeholder={'Write status'}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileStatusWithHooks;","// extracted by mini-css-extract-plugin\nexport default {\"profileEditData\":\"ProfileDataForm_profileEditData__qKBGD\",\"checkboxItem\":\"ProfileDataForm_checkboxItem__QafIX\",\"buttonSave\":\"ProfileDataForm_buttonSave__xTEXX\"};","import React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport s from \"./ProfileDataForm.module.css\";\r\nimport {Abc} from \"@mui/icons-material\";\r\nimport AppButton from \"../../common/Button/AppButton\";\r\n\r\nexport type ProfileFormDataType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileFormDataType>> = ({handleSubmit,error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n        </div>\r\n        <div className={s.profileEditData}>\r\n            <b className={s.filterName}>Full name</b>: <>{createField(\"Full name\", 'fullName', [], Input)}</>\r\n        </div>\r\n        <div className={s.profileEditData}>\r\n            <b>Looking for a job</b>:<span className={s.checkboxItem}>{createField(\"\", 'lookingForAJob', [], Input, {type: 'checkbox'})}</span>\r\n        </div>\r\n        <div className={s.profileEditData}>\r\n            <b>My professional\r\n                skills</b>:{createField(\"My professional skills\", 'lookingForAJobDescription', [], Textarea)}\r\n        </div>\r\n        <div className={s.profileEditData}>\r\n            <b>About me</b>:{createField(\"About me\", 'aboutMe', [], Textarea)}\r\n        </div>\r\n        <div className={s.buttonSave}></div>\r\n        <AppButton title={'Save'}/>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileFormDataType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport {ProfileModel} from \"../../../redux/profile-reducer\";\r\nimport ProfileDataForm, {ProfileFormDataType} from \"./ProfileDataForm\";\r\nimport AppButton from \"../../common/Button/AppButton\";\r\n\r\nexport type ProfileInfoType = {\r\n    profile: ProfileModel\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n    isOwner: boolean\r\n    savePhoto: (photoFile: File) => void\r\n    saveProfile: (profile: ProfileFormDataType) => void\r\n\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: ProfileInfoType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length !== 0) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileFormDataType) => {\r\n        saveProfile(formData)\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.photoBlock}>\r\n                    <img src={profile.photos.large ? profile.photos.large : userPhoto}\r\n                         className={s.userPhoto} alt={'avatar'}/>\r\n                    {isOwner && <>\r\n                        <label htmlFor=\"inputFile\" className={s.inputFileButton}>\r\n                            <AppButton title={'Add file'}></AppButton>\r\n                            <input\r\n                                name=\"file\"\r\n                                type=\"file\"\r\n                                id=\"inputFile\"\r\n                                style={{display: \"none\"}}\r\n                                onChange={onMainPhotoSelected}\r\n                            />\r\n                        </label>\r\n\r\n                    </>}\r\n                </div>\r\n\r\n                <div className={s.profileBlock}>\r\n                    <div className={s.statusBlock}>\r\n                        <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                    </div>\r\n                    {editMode\r\n                        ? <ProfileDataForm initialValues={profile} onSubmit={onSubmit}/>\r\n                        : <ProfileData goToEditMode={() => {\r\n                            setEditMode(true)\r\n                        }} profile={profile} isOwner={isOwner}/>}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport type ProfileDataType = {\r\n    profile: ProfileModel\r\n    isOwner?: boolean\r\n    goToEditMode?: () => void\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataType) => {\r\n    return <div>\r\n        <div className={s.profileData}>\r\n            <b>Full name</b>: <span>{profile.fullName}</span>\r\n        </div>\r\n        <div className={s.profileData}>\r\n            <b>Looking for a job</b>: <span>{profile.lookingForAJob ? 'Yes' : 'No'}</span>\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n            <div className={s.profileData}>\r\n                <b>My professional skills</b>: <span>{profile.lookingForAJobDescription}</span>\r\n            </div>\r\n        }\r\n        <div className={s.profileData}>\r\n            <b>About me</b>: <span>{profile.aboutMe}</span>\r\n        </div>\r\n        {isOwner && <div className={s.buttonEdit}>\r\n            <AppButton title={'Edit'} clickCallback={goToEditMode}/>\r\n        </div>}\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__eZLTq\",\"posts\":\"MyPosts_posts__BgJ1G\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__CRBk1\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport {PostModel, ProfileModel} from \"../../../../redux/profile-reducer\";\r\nimport userPhoto from \"../../../../assets/images/user.png\";\r\n\r\ninterface PostProps extends PostModel{\r\n    profile:ProfileModel\r\n}\r\n\r\nconst Post = ({message,profile}:PostProps,) => {\r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <img src={profile.photos.small ? profile.photos.small : userPhoto} alt={''}/>\r\n                {message}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React, {useEffect} from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {PostModel, ProfileModel, setPostsActionCreator} from \"../../../redux/profile-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport post from \"./Post/Post\";\r\n\r\ntype MyPostsType = {\r\n    posts: PostModel[]\r\n    addPost: (newPostText: string) => void\r\n    profile: ProfileModel\r\n}\r\n\r\ntype FormDataType = {\r\n    newPostText: string,\r\n}\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const savedPosts = localStorage.getItem(\"posts\");\r\n        if (savedPosts) {\r\n            const parsedPosts: PostModel[] = JSON.parse(savedPosts);\r\n            console.log(parsedPosts)\r\n            dispatch(setPostsActionCreator(parsedPosts));\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"posts\", JSON.stringify(props.posts));\r\n    }, [props.posts]);\r\n\r\n    const handleDeletePost = (postId:string) => {\r\n        const posts = JSON.parse(localStorage.getItem(\"posts\") ??'[]');\r\n        const updatedPosts = posts.filter((post:PostModel) => post.id !== postId);\r\n        localStorage.setItem(\"posts\", JSON.stringify(updatedPosts));\r\n    }\r\n\r\n    const handleDeletePost1 = (postId:string) => {\r\n        // удаление поста по его id\r\n        const updatedPosts = props.posts.filter(post => post.id !== postId);\r\n\r\n        // обновление данных в localStorage\r\n        localStorage.setItem(\"posts\", JSON.stringify(updatedPosts));\r\n    };\r\n\r\n    let postsElements =\r\n        props.posts.map(p => <div><Post key={p.id} id={p.id} message={p.message} profile={props.profile}/>\r\n        </div>)\r\n\r\n    let onAddPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My post</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nlet AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'} component={Textarea} validate={[required, maxLength10]}\r\n                       placeholder={'Post message'}/>\r\n            </div>\r\n            <div>\r\n                <button>Add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport default MyPosts","import React from \"react\";\r\nimport {addPostActionCreator, PostModel, ProfileReducerState} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = ProfileReducerState\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText:string) => void\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profileReducer.posts,\r\n        profile: state.profileReducer.profile,\r\n        status: state.profileReducer.status\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText:string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileModel} from \"../../redux/profile-reducer\";\r\nimport {ProfileFormDataType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\n\r\n\r\ntype ProfileTypePage = {\r\n    profile: ProfileModel\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n    isOwner: boolean\r\n    savePhoto: (photoFile: File) => void\r\n    saveProfile:(profile:ProfileFormDataType)=>void\r\n\r\n}\r\n\r\nconst Profile = (props: ProfileTypePage) => {\r\n\r\n    return (<div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                updateStatus={props.updateStatus}\r\n                status={props.status}\r\n                isOwner={props.isOwner}\r\n                saveProfile={props.saveProfile}\r\n                savePhoto={props.savePhoto}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getStatusTC,\r\n    getUserProfileTC,\r\n    ProfileModel,\r\n    savePhotoTC,\r\n    saveProfileTC,\r\n    updateStatusTC\r\n} from \"../../redux/profile-reducer\";\r\nimport {Redirect, useLocation, useParams,} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileFormDataType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\ntype ProfileContainerType = {\r\n    getUserProfile: (userId: string) => void,\r\n    profile: ProfileModel\r\n    router: { location: Location, params: { [key: string]: string } }\r\n    isAuth: boolean\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n    authorizedUserId: string\r\n    savePhoto: (photoFile: File) => void\r\n    saveProfile:(profile:ProfileFormDataType)=>void\r\n\r\n}\r\n\r\nfunction withRouter(Component: any) {\r\n    function ComponentWithRouterProp(props: any) {\r\n        let location = useLocation();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{location, params}}\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.router.params['userId']\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                <Redirect to={'/login'}/>\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.router.params['userId'] != prevProps.router.params['userId']) {\r\n            this.refreshProfile()\r\n            console.log(this.props.profile)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.router.params['userId']}\r\n                     saveProfile={this.props.saveProfile}\r\n                     updateStatus={this.props.updateStatus}\r\n                     status={this.props.status}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        profile: state.profileReducer.profile,\r\n        status: state.profileReducer.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile: getUserProfileTC,\r\n        getStatus: getStatusTC,\r\n        updateStatus: updateStatusTC,\r\n        savePhoto: savePhotoTC,\r\n        saveProfile:saveProfileTC\r\n    }),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer)\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n\r\n}\r\nlet mapStateToPropsForRedirect = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n\r\n        let {isAuth, ...resProps} = props\r\n\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...resProps as T}/>\r\n    }\r\n\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","className","s","src","writeStatus","alt","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","placeholder","reduxForm","form","handleSubmit","error","onSubmit","style","createField","Input","type","Textarea","AppButton","title","ProfileData","profile","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","clickCallback","savePhoto","saveProfile","Preloader","photos","large","userPhoto","htmlFor","name","id","display","target","files","length","initialValues","formData","message","small","MyPosts","React","dispatch","useDispatch","savedPosts","localStorage","getItem","parsedPosts","JSON","parse","console","log","setPostsActionCreator","setItem","stringify","posts","postsElements","map","p","AddNewPostFormRedux","values","addPost","newPostText","maxLength10","maxLengthCreator","Field","component","validate","required","connect","state","profileReducer","addPostActionCreator","ProfileContainer","userId","this","router","params","authorizedUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","getUserProfileTC","getStatusTC","updateStatusTC","savePhotoTC","saveProfileTC","Component","location","useLocation","useParams","WithAuthRedirect","mapStateToPropsForRedirect","resProps","to"],"sourceRoot":""}