{"version":3,"file":"static/js/528.9e4c48cb.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profilePhoto\":\"ProfileInfo_profilePhoto__1FrHD\",\"selectedPage\":\"ProfileInfo_selectedPage__j3mWC\",\"content\":\"ProfileInfo_content__Ivwxy\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__bFylV\",\"userPhoto\":\"ProfileInfo_userPhoto__6pcwK\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status ])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || '--------'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange}\r\n                           autoFocus={true}\r\n                           onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/store\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport styles from \"../../Profile/ProfileInfo/ProfileInfo.module.css\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}: ProfileInfoType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    console.log(profile.photos)\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.small ? profile.photos.small : userPhoto}\r\n                     className={styles.userPhoto} alt={'avatar'}/>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__eZLTq\",\"posts\":\"MyPosts_posts__BgJ1G\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__CRBk1\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport {PostsType} from \"../../../../redux/store\";\r\n\r\n\r\nconst Post = (props:PostsType) => {\r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <img\r\n                    src={'https://n1s2.hsmedia.ru/6a/46/ae/6a46aeed947a183d67d1bc48211151bf/480x496_0xac120003_4430520541578509619.jpg'}/>\r\n                {props.message}\r\n                <div><span>like {props.likesCount}</span></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {PostsType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\ntype MyPostsType = {\r\n    posts: Array<PostsType>\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype FormDataType = {\r\n    newPostText: string,\r\n}\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n    let postsElements =\r\n        props.posts.map(p => <Post id={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    let onAddPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My post</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nlet AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'} component={Textarea} validate={[required, maxLength10]} placeholder={'Post message'}/>\r\n            </div>\r\n            <div>\r\n                <button>Add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport default MyPosts","import React from \"react\";\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {InitialStateType} from \"../../../redux/profile-reducer\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = InitialStateType\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText:string) => void\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profileReducer.posts,\r\n        profile: state.profileReducer.profile,\r\n        status: state.profileReducer.status\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText:string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/store\";\r\n\r\n\r\ntype ProfileTypePage = {\r\n    profile: ProfileType\r\n    updateStatus:(status: string)=>void\r\n    status:string\r\n    \r\n}\r\n\r\nconst Profile = (props: ProfileTypePage) => {\r\n\r\n    return (<div>\r\n            <ProfileInfo profile={props.profile} updateStatus={props.updateStatus} status={props.status}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {getStatusTC, getUserProfileTC, updateStatusTC} from \"../../redux/profile-reducer\";\r\nimport {ProfileType} from \"../../redux/store\";\r\nimport {Redirect, useLocation, useParams,} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype ProfileContainerType = {\r\n    getUserProfile: (userId: string) => void,\r\n    profile: ProfileType\r\n    router: { location: Location, params: { [key: string]: string } }\r\n    isAuth: boolean\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    status:string\r\n    authorizedUserId:string\r\n\r\n}\r\n\r\nfunction withRouter(Component: any) {\r\n    function ComponentWithRouterProp(props: any) {\r\n        let location = useLocation();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{location, params}}\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.router.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if(!userId){\r\n                <Redirect to={'/login'}/>\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     updateStatus={this.props.updateStatus}\r\n                     status={this.props.status}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => ({\r\n    profile: state.profileReducer.profile,\r\n    status: state.profileReducer.status,\r\n    authorizedUserId:state.auth.userId,\r\n    isAuth:state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile: getUserProfileTC,\r\n        getStatus: getStatusTC,\r\n        updateStatus: updateStatusTC\r\n    }),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer)\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n\r\n}\r\nlet mapStateToPropsForRedirect = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n\r\n        let {isAuth,...resProps}=props\r\n\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...resProps as T}/>\r\n    }\r\n\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","profile","console","log","photos","className","s","src","small","userPhoto","styles","alt","Preloader","message","likesCount","MyPosts","React","postsElements","posts","map","p","id","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","validate","required","placeholder","connect","state","profileReducer","dispatch","addPostActionCreator","ProfileContainer","userId","this","router","params","authorizedUserId","getUserProfile","getStatus","compose","auth","isAuth","getUserProfileTC","getStatusTC","updateStatusTC","Component","location","useLocation","useParams","WithAuthRedirect","mapStateToPropsForRedirect","resProps","to"],"sourceRoot":""}