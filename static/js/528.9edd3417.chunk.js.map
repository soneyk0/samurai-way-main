{"version":3,"file":"static/js/528.9edd3417.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profilePhoto\":\"ProfileInfo_profilePhoto__1FrHD\",\"selectedPage\":\"ProfileInfo_selectedPage__j3mWC\",\"content\":\"ProfileInfo_content__Ivwxy\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__bFylV\",\"userPhoto\":\"ProfileInfo_userPhoto__6pcwK\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status ])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                   <b>Status:</b> <span onDoubleClick={activateEditMode}>{props.status || '--------'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange}\r\n                           autoFocus={true}\r\n                           onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileStatusWithHooks;","import React, {ChangeEvent} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport styles from \"../../Profile/ProfileInfo/ProfileInfo.module.css\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport {ProfileModel} from \"../../../redux/profile-reducer\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileModel\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n    isOwner: boolean\r\n    savePhoto: (photoFile: File) => void\r\n\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto}: ProfileInfoType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length !== 0) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.small ? profile.photos.small : userPhoto}\r\n                     className={styles.userPhoto} alt={'avatar'}/>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n                <div>\r\n                    <div>\r\n                        <b>Full name</b>:{profile.fullName}\r\n                    </div>\r\n                    <div>\r\n                        <b>Looking for a job</b>:{profile.lookingForAJob ? 'Yes' : 'No'}\r\n                    </div>\r\n                    {profile.lookingForAJob &&\r\n                        <div>\r\n                            <b>My professional skills</b>:{profile.lookingForAJobDescription}\r\n                        </div>\r\n                    }\r\n                    <div>\r\n                        <b>About me</b>:{profile.aboutMe}\r\n                    </div>\r\n                </div>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__eZLTq\",\"posts\":\"MyPosts_posts__BgJ1G\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__CRBk1\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport {PostModel} from \"../../../../redux/profile-reducer\";\r\n\r\n\r\n\r\nconst Post = ({message, likesCount}:PostModel) => {\r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <img src={'https://n1s2.hsmedia.ru/6a/46/ae/6a46aeed947a183d67d1bc48211151bf/480x496_0xac120003_4430520541578509619.jpg'} alt={''}/>\r\n                {message}\r\n                <div><span>like {likesCount}</span></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {PostModel} from \"../../../redux/profile-reducer\";\r\n\r\ntype MyPostsType = {\r\n    posts: PostModel[]\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype FormDataType = {\r\n    newPostText: string,\r\n}\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n    let postsElements =\r\n        props.posts.map(p => <Post key={p.id} id={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    let onAddPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My post</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nlet AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'} component={Textarea} validate={[required, maxLength10]} placeholder={'Post message'}/>\r\n            </div>\r\n            <div>\r\n                <button>Add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport default MyPosts","import React from \"react\";\r\nimport {addPostActionCreator, ProfileReducerState} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = ProfileReducerState\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText:string) => void\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profileReducer.posts,\r\n        profile: state.profileReducer.profile,\r\n        status: state.profileReducer.status\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText:string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileModel} from \"../../redux/profile-reducer\";\r\n\r\n\r\n\r\ntype ProfileTypePage = {\r\n    profile: ProfileModel\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n    isOwner: boolean\r\n    savePhoto: (photoFile: File) => void\r\n\r\n}\r\n\r\nconst Profile = (props: ProfileTypePage) => {\r\n\r\n    return (<div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                updateStatus={props.updateStatus}\r\n                status={props.status}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {getStatusTC, getUserProfileTC, ProfileModel, savePhotoTC, updateStatusTC} from \"../../redux/profile-reducer\";\r\nimport {Redirect, useLocation, useParams,} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype ProfileContainerType = {\r\n    getUserProfile: (userId: string) => void,\r\n    profile: ProfileModel\r\n    router: { location: Location, params: { [key: string]: string } }\r\n    isAuth: boolean\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n    authorizedUserId: string\r\n    savePhoto: (photoFile: File) => void\r\n\r\n}\r\n\r\nfunction withRouter(Component: any) {\r\n    function ComponentWithRouterProp(props: any) {\r\n        let location = useLocation();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{location, params}}\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.router.params['userId']\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                <Redirect to={'/login'}/>\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.router.params['userId'] != prevProps.router.params['userId']) {\r\n            this.refreshProfile()\r\n            console.log(this.props.profile)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.router.params['userId']}\r\n                     profile={this.props.profile}\r\n                     updateStatus={this.props.updateStatus}\r\n                     status={this.props.status}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        profile: state.profileReducer.profile,\r\n        status: state.profileReducer.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile: getUserProfileTC,\r\n        getStatus: getStatusTC,\r\n        updateStatus: updateStatusTC,\r\n        savePhoto: savePhotoTC\r\n    }),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer)\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n\r\n}\r\nlet mapStateToPropsForRedirect = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n\r\n        let {isAuth, ...resProps} = props\r\n\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...resProps as T}/>\r\n    }\r\n\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","profile","isOwner","savePhoto","Preloader","className","s","src","photos","small","userPhoto","styles","alt","type","target","files","length","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","message","likesCount","MyPosts","React","postsElements","posts","map","p","id","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","validate","required","placeholder","connect","state","profileReducer","dispatch","addPostActionCreator","ProfileContainer","userId","this","router","params","authorizedUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","console","log","compose","auth","isAuth","getUserProfileTC","getStatusTC","updateStatusTC","savePhotoTC","Component","location","useLocation","useParams","WithAuthRedirect","mapStateToPropsForRedirect","resProps","to"],"sourceRoot":""}