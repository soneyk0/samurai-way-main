{"version":3,"file":"static/js/320.5196c57d.chunk.js","mappings":"mLACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAA6K,0BAA7K,EAAiN,yB,mBCajN,EATmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,gBAAKC,UAAWC,EAAW,IAAMA,EAAjC,UACH,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCclC,EAjBgB,SAACN,IAEWO,EAAAA,EAAAA,QAA4B,MAEpD,OACA,0BACI,gBAAKJ,UAAWC,EAAhB,SAA4BJ,EAAMQ,a,uCCqCpCC,GAAeC,EAAAA,EAAAA,GAAiB,KAmBhCC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA/BD,EAjBsC,SAACZ,GAC/D,OACI,kBAAMc,SAAUd,EAAMe,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,EAAUX,GACrBH,KAAM,iBACNe,YAAa,0BAExB,0BACI,6CAShB,EAnDgB,SAACrB,GAEb,IAAIsB,EAAQtB,EAAMuB,YAGdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAMJ,GAAIyB,EAAEzB,QACzE0B,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAStB,QAASsB,EAAEtB,QAASN,GAAI4B,EAAE5B,QAQlF,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKoB,KAEL,gBAAKrB,UAAWC,EAAhB,UACI,yBAAMwB,OAEV,0BACI,SAACjB,EAAD,CAAqBG,SAdP,SAACiB,GACvB/B,EAAMgC,YAAYD,EAAOE,yB,wCCEjC,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAfkB,SAACb,GACnB,MAAO,CACHC,YAAaD,EAAMc,mBAIF,SAACC,GACtB,MAAO,CACHL,YAAa,SAACC,GACVI,GAASC,EAAAA,EAAAA,GAAyBL,SAO1CM,EAAAA,GACAC,EAAAA,EAHJ,CAIEC,I,iIC1BEC,EAA6B,SAACpB,GAC9B,MAAO,CACHqB,OAAQrB,EAAMsB,KAAKD,SAIpB,SAASH,EAAoBK,GAWhC,OADiCV,EAAAA,EAAAA,IAAQO,EAARP,EATP,SAACnC,GAEKA,EAAvB2C,OAAL,IAAgBG,GAAhB,OAA4B9C,EAA5B,GAEA,OAAKA,EAAM2C,QACJ,SAACE,GAAD,UAAeC,KADI,SAAC,KAAD,CAAUzC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Ue7sD\",\"dialogsItems\":\"Dialogs_dialogsItems__72fFD\",\"active\":\"Dialogs_active__je3mQ\",\"dialog\":\"Dialogs_dialog__qY848\",\"messages\":\"Dialogs_messages__rzqsb\",\"message\":\"Dialogs_message__Io72a\"};","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogsType} from \"../../../redux/store\";\r\n\r\nconst DialogItem = (props: DialogsType) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n\r\n}\r\n\r\nexport default DialogItem;","import React, {useRef} from \"react\";\r\nimport s from './../Dialogs.module.css'\r\nimport {PostsMessages} from \"../../../redux/store\";\r\n\r\n\r\n\r\nconst Message = (props: PostsMessages) => {\r\n\r\n    const newMessageElement=useRef<HTMLTextAreaElement>(null);\r\n\r\n    return (\r\n    <div>\r\n        <div className={s.message}>{props.message}</div>\r\n        {/*<div>*/}\r\n        {/*    <textarea ref={newMessageElement}></textarea>*/}\r\n        {/*</div>*/}\r\n        {/*<div>*/}\r\n        {/*    <button onClick={newMessage}>Add</button>*/}\r\n        {/*</div>*/}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogPageType} from \"../../redux/store\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nexport type DialogType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n    dialogsPage: DialogPageType\r\n    isAuth: boolean\r\n}\r\ntype FormDataType = {\r\n    newMessageBody: string,\r\n}\r\n\r\n\r\nconst Dialogs = (props: DialogType) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>)\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} id={m.id}/>)\r\n\r\n\r\n    let addNewMessageChange = (values: FormDataType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <div>\r\n                <AddMessageFormRedux onSubmit={addNewMessageChange}/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength100]}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'Enter your message'}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {\r\n    sendMessageActionCreator,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {DialogPageType} from \"../../redux/store\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogPageType\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsReducer\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(Dialogs);\r\n\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n\r\n}\r\nlet mapStateToPropsForRedirect = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n\r\n        let {isAuth, ...resProps} = props\r\n\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...resProps as T}/>\r\n    }\r\n\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}"],"names":["props","path","id","className","s","to","name","useRef","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","sendMessage","newMessageBody","compose","connect","dialogsReducer","dispatch","sendMessageActionCreator","withRouter","WithAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","resProps"],"sourceRoot":""}